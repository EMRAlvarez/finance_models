"""
Formulae

Developers:
James Briggs

Description:
Script containing more complex calculations for Cashflow modelling.
"""

import numpy as np


def princcum(rate, nper, loan_amount, period, when):
    """
    Calculates the cumulative principal repaid between the first month
    and the m-th month of a loan.

    Parameters
    ----------
    rate : float
        Interest rate.
    nper : int
        Number of periods in loan term.
    loan_amount : float or int
        Loan principal.
    m : int
        Loan month up to which we should calculate.
    when : int
        Integer flag, repayment at the beginning (1), end of the month (0).


    Returns
    -------
    float
        Cumulative principal repaid.

    """

    principal_paid = 0  # initialise the cumulative principal amount
    repay = -np.pmt(rate, nper, loan_amount, 0, when)  # calculate monthly repay

    if when == 1:
        # if the repay is calculated at the  start of the month, calculate
        # the first month now
        loan_amount -= repay
        principal_paid += repay
        period -= 1  # remember to reduce number of months by 1

    # begin iterating through each month in period
    for i in range(period):
        # calculate the amount generated by interest this month
        month_interest = loan_amount * rate
        paid_off = repay - month_interest  # how much is paid off?
        principal_paid += paid_off  # calculate the cumulative amount paid
        loan_amount -= paid_off  # calculate the amount left to pay

    # return the cumulative amount paid
    return principal_paid


def func_scheduled_payment(m, loan_amount, reversion, cpy_prev, ostmt, epmt_prev,
                          spmt_prev, monthly_repay_io, monthly_repay,
                          monthly_repay_reversion, monthly_repay_io_reversion):
    """
    Calculation of scheduled payment. Incompatible with arrays, vectorised
    implementation provided by 'v_scheduled_payment'.

    Parameters
    ----------
    m : int
        Current month index.
    loan_amount : float
        The initial loan amount.
    reversion : int
        Reversion month index.
    cpy_prev : float
        Cumulative prepayment from the previous month.
    ostmt : float
        Statement amount from the previous month.
    epmt_prev : float
        Early prepayment from the previous month.
    spmt_prev : float
        Scheduled payment from the previous month.
    monthly_repay_io : float
        Monthly repay amount (interest only).
    monthly_repay : float
        Monthly repay amount.
    monthly_repay_reversion : float
        Monthly repay amount after the reversion date.
    monthly_repay_io_reversion : float
        Monthly repay amount (interest only) after the reversion date.

    Returns
    -------
    None.
    """

    if m == 1:
        # IO = interest only (finding the scheduled payment should be for
        # non-interest only loans)
        spmt = -monthly_repay_io - monthly_repay

    elif m == reversion - 1:
        # at the reversion date we have a slightly different calculation
        spmt = -(monthly_repay_reversion +
                 monthly_repay_io_reversion) * \
                 (loan_amount - cpy_prev) / loan_amount
    else:
        if ostmt - epmt_prev != 0:
            spmt = (ostmt * spmt_prev) / (ostmt - epmt_prev)
        else:
            spmt = 0

    return spmt

# vectorised implementation of scheduled payment function
v_scheduled_payment = np.vectorize(func_scheduled_payment)


def cum_prepayment(cpy_prev, amount, cam, cpr, cpr_prev):
    """
    Calculation of cumulative prepayment.

    Parameters
    ----------
    cpy_prev : numpy array
        Cumulative prepayment from the previous month.
    amount : numpy array
        The initial loan amount.
    cam : numpy array
        Cumulative amortisation for the current month.
    cpr : numpy array
        Conditional prepayment rate (CPR) for the current month.
    cpr_prev : numpy array
        Conditional prepayment rate (CPR) from the previous month.

    Returns
    -------
    _ : numpy array
        Calculated cumulative prepayment.
    """

    # calculate the cumulative prepayment and return
    return cpy_prev + (amount + cam) * ((1-cpr) -
                                        (1-cpr_prev))


def func_early_repayment(ostmt, sint, spmt, cpy_prev, cpy):
    """
    Calculation of early repayment.

    Parameters
    ----------
    ostmt : float
        Statement amount from the previous month.
    sint : float
        Statement interest for the current month.
    spmt : float
        Scheduled payment for the current month.
    cpy_prev : float
        Cumulative payment from the previous month.
    cpy : float
        Cumulative payment for the current month.

    Returns
    -------
    _ : float
        Calculated early repayment.
    """

    # if cumulative prepayment this month is less than previous month's +
    # previous statement amount + current statement interest and scheduled
    # payment, return previous - current cumulative prepayment amount
    if (ostmt + sint + spmt + cpy_prev - cpy > 0):
        return cpy_prev - cpy
    else:
        # otherwise early repayment is previous statement balance + current
        # interest + current scheduled payment
        return -(ostmt + sint + spmt)


# vectorised implementation of early repayment calculation
v_early_repayment = np.vectorize(func_early_repayment)


def cashflow_calc(prev_amt, prev_costs, prev_fees, prev_spmt, prev_epmt,
                  erc, adjustments):
    """
    Calculation of the current cashflow.

    Parameters
    ----------
    prev_amt : numpy array
        Loan amount from previous month, this should only affect month 1.
    prev_costs : numpy array
        Costs from previous month (upfront costs will only affect month 1).
    prev_fees : numpy array
        Fees from previous month (upfront fees will only affect month 1).
    prev_spmt : numpy array
        Scheduled payment from previous month.
    prev_epmt : numpy array
        Early repayment from previous month.
    erc : numpy array
        Early repayment charge from previous month.
    adjustments : numpy array
        All adjustments during this month.

    Returns
    -------
    _ : numpy array
        Calculated cashflow.

    """

    # calculate the cashflow and return
    return prev_amt + prev_costs - prev_fees + \
           prev_spmt + prev_epmt + erc + adjustments
